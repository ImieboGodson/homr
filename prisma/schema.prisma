// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  email           String?
  emailVerifiedAt DateTime?
  image           String?
  hashPassword    String?
  favoriteIds     String[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime? @updatedAt

  accounts Account[]
  listings Listing[]
  bookings Booking[]
  viewings Viewing[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Listing {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId        String   @db.ObjectId
  title         String
  description   String
  images        String[]
  category      String
  location      String
  roomCount     Int
  bathroomCount Int
  type          String
  status        String
  price         Int
  createdAt     DateTime @default(now())

  bookings Booking[]
  viewings Viewing[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Booking {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  userId         String   @db.ObjectId
  listingId      String   @db.ObjectId
  startDate      DateTime
  endDate        DateTime
  guestCount     Int
  category       String
  paymentType    String
  stateOfPayment String
  totalPrice     Int

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  Listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model Viewing {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  listingId String   @db.ObjectId
  username  String
  date      DateTime
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
}
